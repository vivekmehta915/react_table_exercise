{"version":3,"sources":["components/ReadOnlyRow.js","components/EditableRow.js","components/TableHead.js","App.js","index.js"],"names":["ReadOnlyRow","contact","handleEditClick","handleDeleteClick","fullName","email","phoneNumber","type","className","onClick","event","id","EditableRow","editFormData","handleEditFormChange","handleCancelClick","required","placeholder","name","value","onChange","TableHead","columns","handleSorting","useState","sortField","setSortField","order","setOrder","map","label","accessor","sortOrder","handleSortingChange","style","marginLeft","App","formFields","data","contacts","setContacts","addFormData","setAddFormData","setEditFormData","editContactId","setEditContactId","handleAddFormChange","preventDefault","fieldName","target","getAttribute","fieldValue","newFormData","formValues","contactId","newContacts","index","findIndex","splice","onSubmit","nanoid","reset","editedContact","sorted","sort","a","b","toString","localeCompare","numeric","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71c4882e.chunk.js","sourcesContent":["import React from \"react\";\nimport { FaTrash } from 'react-icons/fa';\nimport { FaPencilAlt } from 'react-icons/fa';\n\nconst ReadOnlyRow = ({ contact, handleEditClick, handleDeleteClick }) => {\n  return (\n    <tr>\n      <td>{contact.fullName}</td>\n      <td>{contact.email}</td>\n      <td>{contact.phoneNumber}</td>\n      <td>\n        <button\n          type=\"button\" className=\"btn\"\n          onClick={(event) => handleEditClick(event, contact)}\n        >\n          <FaPencilAlt />\n        </button>\n        <button type=\"button\" className=\"btn\" onClick={() => handleDeleteClick(contact.id)}>\n        <FaTrash />\n        </button>\n        <div>\n    </div>\n      </td>\n    </tr>\n  );\n};\n\nexport default ReadOnlyRow;\n","import React from \"react\";\n\nconst EditableRow = ({\n  editFormData,\n  handleEditFormChange,\n  handleCancelClick,\n}) => {\n  return (\n    <tr>\n      <td>\n        <input\n          type=\"text\"\n          required=\"required\"\n          placeholder=\"Enter a name...\"\n          name=\"fullName\"\n          value={editFormData.fullName}\n          onChange={handleEditFormChange}\n        ></input>\n      </td>\n      <td>\n        <input\n          type=\"email\"\n          required=\"required\"\n          placeholder=\"Enter an email...\"\n          name=\"email\"\n          value={editFormData.email}\n          onChange={handleEditFormChange}\n        ></input>\n      </td>\n      <td>\n        <input\n          type=\"text\"\n          required=\"required\"\n          placeholder=\"Enter a phone number...\"\n          name=\"phoneNumber\"\n          value={editFormData.phoneNumber}\n          onChange={handleEditFormChange}\n        ></input>\n      </td>      \n      <td>\n        <button type=\"button\" className=\"btn_editable\" onClick={handleCancelClick}>\n          Cancel\n        </button>\n        <button type=\"submit\" className=\"btn_editable\">Save</button>\n      </td>\n    </tr>\n  );\n};\n\nexport default EditableRow;\n","import { FaArrowUp, FaArrowDown } from 'react-icons/fa';\nimport React, { useState } from \"react\";\n\nconst TableHead = ({ columns , handleSorting}) => {\n\n    const [sortField, setSortField] = useState(\"\");\n    const [order, setOrder] = useState(\"asc\");\n  \n    const handleSortingChange = (accessor) => {\n      const sortOrder =\n        accessor === sortField && order === \"asc\" ? \"desc\" : \"asc\";\n      setSortField(accessor);\n      setOrder(sortOrder);\n      handleSorting(accessor, sortOrder);\n    };\n    return (\n     <thead>\n      <tr>\n       {columns.map(({ label, accessor }) => {\n        return (\n         <th key={accessor} onClick={() => handleSortingChange(accessor)}>\n          {label}\n          <span style={{marginLeft: '8px'}}>\n             {sortField === accessor & order === \"asc\" ? <FaArrowUp/> : <FaArrowDown/>}\n          </span>\n         </th>\n        );\n       })}\n      </tr>\n     </thead>\n    );\n   };\n\nexport default TableHead;","import React, { useState, Fragment } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport \"./App.css\";\nimport data from \"./mock-data.json\";\nimport ReadOnlyRow from \"./components/ReadOnlyRow\";\nimport EditableRow from \"./components/EditableRow\";\nimport TableHead from \"./components/TableHead\";\nconst App = () => {\n  \n  const formFields = {\n    fullName: \"\",\n    phoneNumber: \"\",\n    email: \"\",\n  }\n\n  const [contacts, setContacts] = useState(data);\n\n  const [addFormData, setAddFormData] = useState(formFields);\n\n  const [editFormData, setEditFormData] = useState(formFields);\n\n  const [editContactId, setEditContactId] = useState(null);\n\n  const handleAddFormChange = (event) => {\n    event.preventDefault();\n\n    const fieldName = event.target.getAttribute(\"name\");\n    const fieldValue = event.target.value;\n\n    const newFormData = { ...addFormData };\n    newFormData[fieldName] = fieldValue;\n\n    setAddFormData(newFormData);\n  };\n\n  const handleEditFormChange = (event) => {\n    event.preventDefault();\n\n    const fieldName = event.target.getAttribute(\"name\");\n    const fieldValue = event.target.value;\n\n    const newFormData = { ...editFormData };\n    newFormData[fieldName] = fieldValue;\n\n    setEditFormData(newFormData);\n  };\n\n  const handleAddFormSubmit = (event) => {\n    event.preventDefault();\n\n    const newContact = {\n      id: nanoid(),\n      fullName: addFormData.fullName,\n      phoneNumber: addFormData.phoneNumber,\n      email: addFormData.email,\n    };\n\n    const newContacts = [newContact, ...contacts];\n    setContacts(newContacts);\n    event.target.reset();\n  };\n\n  const handleEditFormSubmit = (event) => {\n    event.preventDefault();\n\n    const editedContact = {\n      id: editContactId,\n      fullName: editFormData.fullName,\n      phoneNumber: editFormData.phoneNumber,\n      email: editFormData.email,\n    };\n\n    const newContacts = [...contacts];\n\n    const index = contacts.findIndex((contact) => contact.id === editContactId);\n\n    newContacts[index] = editedContact;\n\n    setContacts(newContacts);\n    setEditContactId(null);\n  };\n\n  const handleEditClick = (event, contact) => {\n    event.preventDefault();\n    setEditContactId(contact.id);\n\n    const formValues = {\n      fullName: contact.fullName,\n      phoneNumber: contact.phoneNumber,\n      email: contact.email,\n    };\n\n    setEditFormData(formValues);\n  };\n\n  const handleCancelClick = () => {\n    setEditContactId(null);\n  };\n\n  const handleDeleteClick = (contactId) => {\n    const newContacts = [...contacts];\n\n    const index = contacts.findIndex((contact) => contact.id === contactId);\n\n    newContacts.splice(index, 1);\n\n    setContacts(newContacts);\n  };\n\n  const handleSorting = (sortField, sortOrder) => {\n    if (sortField) {\n      const sorted = [...contacts].sort((a, b) => {\n       return (\n        a[sortField].toString().localeCompare(b[sortField].toString(), \"en\", {\n         numeric: true,\n        }) * (sortOrder === \"asc\" ? 1 : -1)\n       );\n      });\n      setContacts(sorted);\n     }\n  };\n\n\n  const columns = [\n    { label: \"Name\", accessor: \"fullName\"},\n    { label: \"Email address\", accessor: \"email\"},\n    { label: \"Phone number\", accessor: \"phoneNumber\"}\n   ];\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"header-box\">\n        <div className=\"logo\">\n          <div className=\"first-part\"></div>\n          <div className=\"second-part\"></div>\n        </div>\n        <div className=\"logo-title\"> lord Software</div>\n      </div>\n      <div className=\"form-container\">\n      <h1>List of participants</h1>\n      <form className=\"input_form\" onSubmit={handleAddFormSubmit}>\n        <div className=\"form-elements\">\n        <input\n          type=\"text\"\n          name=\"fullName\"\n          required=\"required\"\n          placeholder=\"Full name\"\n          onChange={handleAddFormChange}\n        />\n        <input\n          type=\"email\"\n          name=\"email\"\n          required=\"required\"\n          placeholder=\"E-mail address\"\n          onChange={handleAddFormChange}\n        />\n        <input\n          type=\"text\"\n          name=\"phoneNumber\"\n          required=\"required\"\n          placeholder=\"Phone number\"\n          onChange={handleAddFormChange}\n        />\n        </div>\n        \n        <div className=\"form-actions\">\n          <button className=\"add_btn\" type=\"submit\">Add New</button>\n        </div>    \n      </form>\n      <form onSubmit={handleEditFormSubmit}>\n        <table>\n          <TableHead columns={columns} handleSorting={handleSorting}/>\n          <tbody>\n            {contacts.map((contact) => (\n              <Fragment>\n                {editContactId === contact.id ? (\n                  <EditableRow\n                    editFormData={editFormData}\n                    handleEditFormChange={handleEditFormChange}\n                    handleCancelClick={handleCancelClick}\n                  />\n                ) : (\n                  <ReadOnlyRow\n                    contact={contact}\n                    handleEditClick={handleEditClick}\n                    handleDeleteClick={handleDeleteClick}\n                  />\n                )}\n              </Fragment>\n            ))}\n          </tbody>\n        </table>\n      </form>\n   </div>\n  </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}